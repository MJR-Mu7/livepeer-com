{
  "name": "@livepeer/sdk",
  "version": "0.0.0",
  "license": "MIT",
  "main": "main/index.js",
  "module": "lib/index.js",
  "dependencies": {
    "ethjs": "^0.3.0",
    "ethjs-provider-signer": "^0.1.4",
    "ethjs-query": "^0.3.1",
    "ethjs-signer": "^0.1.1"
  },
  "scripts": {
    "build": "npm -s run build-module && npm -s run build-main",
    "build-main": "NODE_ENV=production npx babel src --out-dir main --ignore spec.js,test.js --plugins=transform-es2015-modules-commonjs --source-maps inline",
    "build-module": "NODE_ENV=production npx babel src --out-dir lib --ignore spec.js,test.js --source-maps inline",
    "copy-etc": "f(){ rm -rf etc; mkdir etc; printf 'Importing truffle artifacts...'; tput sc; for x in $@/*.json; do tput rc; tput el; echo \"$(basename $x)\"; node -e \"const {contractName,abi,networks}=require('$x');const [address]=Object.values(networks).sort((a, b) => b.updated_at - a.updated_at);console.log(JSON.stringify({name:contractName,abi,address: (address && address.address) || address}, null, 2));\" > etc/$(basename $x); done; tput rc; tput el; echo 'done! :)'; };f",
    "compile": "pushd ../../node_modules/protocol && rm -rf build && yarn && npx truffle version && yarn compile && popd && yarn copy-etc ../../node_modules/protocol/build/contracts",
    "deploy": "pushd ../../node_modules/protocol && rm -rf build && yarn && npx truffle version && npx truffle migrate --reset && popd && yarn copy-etc ../../node_modules/protocol/build/contracts",
    "prebuild": "rm -rf lib && rm -rf main",
    "prepare": "npm -s run build",
    "test": "npx ava"
  },
  "devDependencies": {
    "ava": "^0.23.0",
    "babel-cli": "^6.26.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.0",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-register": "^6.26.0",
    "protocol": "https://github.com/livepeer/protocol.git#a313fa61369b0e103ec747a923a5424f828e8547",
    "yup": "^0.23.0"
  },
  "ava": {
    "require": [
      "babel-register"
    ],
    "babel": "inherit"
  }
}
